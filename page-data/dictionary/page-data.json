{"componentChunkName":"component---src-templates-blog-post-js","path":"/dictionary/","result":{"data":{"site":{"siteMetadata":{"title":"e v m","author":"Emil Martinov","siteUrl":"https://www.emilmartinov.com"}},"mdx":{"id":"4227c67c-6fe6-5b65-894b-f8e57c32b8fe","excerpt":"Stack: Last in, first out. Think of pancakes, you start to eat from the warmest one. If you wanted to eat from the first one think of how the process of cookingâ€¦","frontmatter":{"title":"Dictionary","date":"December 09, 2019"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"h2\", null, `Introduction`), `\nThis is a post that will continue to grow. I will add sections to it as I am writing other posts. Eventually I want to create a Dictionary to share with everyone. I love javascript and am curious about how it works. Hopefully this curiousity can help you too. `), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"h2\", null, `Right Hand vs Left Hand`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"h2\", null, `Stack and Heap`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Stack: Last in, first out. Think of pancakes, you start to eat from the warmest one. If you wanted to eat from the first one think of how the process of cooking pancakes and serving them would be complicated. Things on the stack must be of fixed size.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When you call a function it is pushed to the stack with its variables, and when it is over it is popped off.The values(arguments) you provide to the function are provided to the function with pointers to the heap which are also stored in the stack.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Heap: on the other hand is less organized. The size may not be fixed. Operating system allocates some space (not exact) on the heap and returns a pointer.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"h2\", null, `Expression vs Statement`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Statements perform an action but do not return a value ( you can not assign them to a variable), whereas expressions at runtime are values. So their result is a value. For example if statements do not necessarily turn into a value, at runtime the engine can run the if statement and do nothing. But with expressions the engine always gets a value, and either returns it or assigns it. `), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"h2\", null, `Ternary Operator`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `if`), ` in javascript is a statement, it is called `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `if statement`), `. It allows us to control the flow. Ternary operator on the other hand is an expression, it allows us to get a value based on a condition. So it is guaranteed to return a right hand side value. There are some places where you can only use expressions, like in string literals. This is commonly used in React components to conditionally apply one class or the other to a component. `), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function isAdult(age) {\n  if (age > 18) {\n    return 'can';\n  } else {\n    return \"can't\";\n  }\n}\nconsole.log(\\`The user \\${isAdult(32)} drive\\`);\nconsole.log(\\`The user \\${\n    if (32 > 18) {\n        return 'can';\n    } else {\n        return \"can't\";\n    }\n  } drive\\`)\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The second console log will throw, as you can see from syntax highlighting, the a statement inside a template literal is not valid syntax. Javascript does not know what do with it. You can return from a function but not an if statement. So if controls the flow, but it can not return a value.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We can also use ternary operator to return an expression;`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `condition ? if the condition is true output this : if not output this`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `So we are asking ? to check the condition and we give it to possible outcomes, first for the true case : then for the false.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const age = 32;\nconsole.log(\\`The user \\${age > 18 ? 'can' : \"can't\"} drive.\\`);\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Instead of writing a function with an if statement then returning the function, we can easily write it in one line and return the value.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Remember we are asking ? if the condition is true or false, then we provide a return value for true : or if not we provide value for false. True comes first as we care about truth more.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"gatsby-resp-image-link\",\n      href: \"/static/9c8f97c90f6af45ffa7357364918fd41/0f98f/truth-is-out-there.jpg\",\n      style: {\n        \"display\": \"block\"\n      },\n      target: \"_blank\",\n      rel: \"noopener\"\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"590px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"56.08108108108109%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n      },\n      alt: \"The truth is out there\",\n      title: \"\",\n      src: \"/static/9c8f97c90f6af45ffa7357364918fd41/1c72d/truth-is-out-there.jpg\",\n      srcSet: \"/static/9c8f97c90f6af45ffa7357364918fd41/a80bd/truth-is-out-there.jpg 148w,\\n/static/9c8f97c90f6af45ffa7357364918fd41/1c91a/truth-is-out-there.jpg 295w,\\n/static/9c8f97c90f6af45ffa7357364918fd41/1c72d/truth-is-out-there.jpg 590w,\\n/static/9c8f97c90f6af45ffa7357364918fd41/a8a14/truth-is-out-there.jpg 885w,\\n/static/9c8f97c90f6af45ffa7357364918fd41/fbd2c/truth-is-out-there.jpg 1180w,\\n/static/9c8f97c90f6af45ffa7357364918fd41/0f98f/truth-is-out-there.jpg 1920w\",\n      sizes: \"(max-width: 590px) 100vw, 590px\"\n    }))))), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"h2\", null, `String Literal and String Template Literal`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `String literal`), ` is any value that is inside `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `''`), ` or `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\"\"`), `. In Javascript you can use them both, this allows you to write strings where `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\"Emil's blog\"`), ` is valid. You could also write it as `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `'Emil\\\\'s blog'`), `. `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"strong\"\n    }, `\\\\`)), ` is known as the `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `escape character`), `. By using it you are telling javascript, do not treat it as you would usually do. So in `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `'Emil\\\\'s blog'`), `, if we did not use the escape character as soon as the second is `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `'`), ` is encountered, `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `'Emil's blog'`), `, javascript closes the string. This will cause our program to throw an error, as the `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `s blog`), ` now is invalid javascript syntax as it is outside the string literal. Afterwards there is another `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `'`), `, which is not closed. So all the code following an unclose `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `'`), ` will be treated as a string. `), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Rule of thumb is string literals come in matching `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `''`), ` or `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\"\"`), `. `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `In strings, a beginning must always have an end`), `.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In order to add a variable in between`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const name = 'Emil'\nconsole.log(name + '\\'s blog'')\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You must combine the strings together by using string concatination. It is a computer science term for combining two different variables of the same type `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `(arrays, strings)`), `.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"h4\", null, `String Template Literal`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Operations with String Literals are very unintuitive. There are a lot of pieces you need to keep in mind. And is error prone. `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `String template literals`), ` make the string literals more readable and reasonable. Here is how we would do the same thing.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const name = 'Emil';\nconsole.log(\\`\\${name}'s blog\\`);\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `By just reading it you can guess what it is doing. `, `\\``, ` the backtick opens and closes the string template literal and inside we can use javascript expressions. Think of string template literals as the superset of template literals, they can do everything a string literal can do and more.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const a = 5;\nconst b = 10;\nconsole.log(\\`a plus b is \\${a + b}.\\`); // a plus b is 15.\nconsole.log('a plus b is ' + a + b + '.'); // a plus b is 510.\nconsole.log('a plus b is ' + (a + b) + '.'); // a plus b is 15.\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Above is another pain point of string literals. Coercion is javascript engineâ€™s attempt to turn your code into a runnable executable. So when you try to concatinate a string with a number, Javacript does not throw an error, but tries to guess what we are trying to do. So it assumes we want to add the number value into the string.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `console.log('1' + 34); // '134'\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `So when we do addition with a string with a number with another addition with a number`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `console.log('a plus b is ' + a + b + '.');\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `From left to right it just adds the numbers into the string as string values.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `String template literals on the other hand are explicit about what will return exactly.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `console.log(\\`a plus b is \\${a + b}.\\`);\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Above we know only after a + b operation is done and returns a value we are going to include it in the string.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In order to perform the number addition operation first we can use braces.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `console.log('a plus b is ' + (a + b) + '.'); // a plus b is 15.\n`)));\n  }\n\n}"}}},"pageContext":{"slug":"/dictionary/","previous":{"id":"3b6ec9b2-16e8-5157-ab98-237576c07762","fields":{"slug":"/functions/"},"frontmatter":{"title":"Functions"},"code":{"scope":""}},"next":null}},"staticQueryHashes":["3128451518","3132601055"]}