{"componentChunkName":"component---src-templates-blog-post-js","path":"/scope-&&-closure/","result":{"data":{"site":{"siteMetadata":{"title":"e v m","author":"Emil Martinov","siteUrl":"https://www.emilmartinov.com"}},"mdx":{"id":"e4438c73-f524-523c-b690-1a62dbb297b6","excerpt":"Let us talk about scope first.\nScope is a mechanism in computer science to hide level of detail and localize it. What does this mean exactly ? Think of a google…","frontmatter":{"title":"Scope && Closure","date":"March 16, 2019"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Let us talk about scope first.\nScope is a mechanism in computer science to hide level of detail and localize it. What does this mean exactly ?`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Think of a google maps. If we think of zoom as a scope,`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"590px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"52.70270270270271%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n      },\n      alt: \"Scope\",\n      title: \"\",\n      src: \"/static/af59e57cf45cb0b58fea7aa885a26b5c/1c72d/scope.jpg\",\n      srcSet: \"/static/af59e57cf45cb0b58fea7aa885a26b5c/a80bd/scope.jpg 148w,\\n/static/af59e57cf45cb0b58fea7aa885a26b5c/1c91a/scope.jpg 295w,\\n/static/af59e57cf45cb0b58fea7aa885a26b5c/1c72d/scope.jpg 590w,\\n/static/af59e57cf45cb0b58fea7aa885a26b5c/b4294/scope.jpg 600w\",\n      sizes: \"(max-width: 590px) 100vw, 590px\"\n    })))), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This is our global scope.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"590px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"49.32432432432432%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n      },\n      alt: \"Global\",\n      title: \"\",\n      src: \"/static/7ec34bb4273431a224e5fd0b57a2c35f/fcda8/global.png\",\n      srcSet: \"/static/7ec34bb4273431a224e5fd0b57a2c35f/12f09/global.png 148w,\\n/static/7ec34bb4273431a224e5fd0b57a2c35f/e4a3f/global.png 295w,\\n/static/7ec34bb4273431a224e5fd0b57a2c35f/fcda8/global.png 590w,\\n/static/7ec34bb4273431a224e5fd0b57a2c35f/efc66/global.png 885w,\\n/static/7ec34bb4273431a224e5fd0b57a2c35f/c83ae/global.png 1180w,\\n/static/7ec34bb4273431a224e5fd0b57a2c35f/29114/global.png 1920w\",\n      sizes: \"(max-width: 590px) 100vw, 590px\"\n    })))), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When we are running our javascript in the browser, it is running at the global scope. At the global level, only information relatvent to the globe is visible, country names, ocean names etc. The map does not try to view every street name at the global zoom level, it is irrelevant and if it did try to that it would be unusuable. Think about it, there won’t be enough space for all the text, streetnames etc.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you search on google maps for Turkey, the result will zoom in from the global view to where you can see Turkey as whole. It does not show you other countries, just Turkey.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"590px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"46.621621621621614%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n      },\n      alt: \"Turkey\",\n      title: \"\",\n      src: \"/static/9ec6f8e2ee656aec323408d89006c079/fcda8/turkey.png\",\n      srcSet: \"/static/9ec6f8e2ee656aec323408d89006c079/12f09/turkey.png 148w,\\n/static/9ec6f8e2ee656aec323408d89006c079/e4a3f/turkey.png 295w,\\n/static/9ec6f8e2ee656aec323408d89006c079/fcda8/turkey.png 590w,\\n/static/9ec6f8e2ee656aec323408d89006c079/efc66/turkey.png 885w,\\n/static/9ec6f8e2ee656aec323408d89006c079/c83ae/turkey.png 1180w,\\n/static/9ec6f8e2ee656aec323408d89006c079/29114/turkey.png 1920w\",\n      sizes: \"(max-width: 590px) 100vw, 590px\"\n    })))), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Additionally you will see that you can also see the names of the cities. Only the big ones. The map shows you the information that it thinks is relevant. It does not pollute your view, with all of the information it has.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"590px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"78.37837837837837%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n      },\n      alt: \"Global\",\n      title: \"\",\n      src: \"/static/4137a0c5f736c22b6e10873d607bc669/fcda8/istanbul.png\",\n      srcSet: \"/static/4137a0c5f736c22b6e10873d607bc669/12f09/istanbul.png 148w,\\n/static/4137a0c5f736c22b6e10873d607bc669/e4a3f/istanbul.png 295w,\\n/static/4137a0c5f736c22b6e10873d607bc669/fcda8/istanbul.png 590w,\\n/static/4137a0c5f736c22b6e10873d607bc669/efc66/istanbul.png 885w,\\n/static/4137a0c5f736c22b6e10873d607bc669/f5209/istanbul.png 1061w\",\n      sizes: \"(max-width: 590px) 100vw, 590px\"\n    })))), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Lets zoom in to the map, for example to Istanbul. Suddenly we start to see the names of the neighbourhoods, aveneues etc. The map already has information about all these places when you first searched for Turkey, but they are not relevant. Seeing all this information would pollute the view and will make it harder for you to locate what you are searching for.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The zoom (scope) of the map also provides us with a `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `context`), `. If we are searching for a streetname in Istanbul, Turkey, we do not want to search the rest of the globe. This prevents us to find the streets that have the same name in different cities in Turkey.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `// Global scope here\nconst oceans = ['Pacific', 'Atlantic', 'Indian', 'Southern', 'Arctic'];\nvar name = 'Global';\nfunction imf() {\n  var name = 'International Monetary Fund';\n  return name;\n}\n\nfunction Turkey() {\n  // local scope of Turkey\n  var name = 'Turkiye';\n  var nationalFootballTeam = 'Milli Futbol Takimi';\n  function Istanbul() {\n    // local scope of City\n    var name = 'Istanbul';\n    return name;\n  }\n  Istanbul();\n  return name;\n}\n\nfunction Netherlands() {\n  var name = 'Nederland';\n  var nationalFootballTeam = 'Nationaal Voetbalteam';\n  function Amsterdam() {\n    var name = 'Amsterdam';\n    return name;\n  }\n  Amsterdam();\n  return name;\n}\nimf();\nTurkey();\nNetherlands();\nconsole.log(name);\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This will return`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `'International Monetary Fund';\n'Istanbul';\n'Turkiye';\n'Nederland';\n'Amsterdam';\n'Global';\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In the above example, we are seeing name variables everywhere. When I first started coding, this was extremely confusing for me. `), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `What you need to know`), `\nWhen you invoke a function (remember! if you do not call the function, it is just definition for the javascript engine), the variables inside the `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `{}`), ` and the arguments provided to the `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `function(...arguments)`), ` live within the function. This is the function scope, and when javascript is looking for a variable inside the function call, it will first look at this scope and only after it fails to find the variable will go one scope up, and repeat till it finds the varible/function. `), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `scope`), ` when looking for variables/functions `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `always zooms out`), ` and looks to the enclosing scope, till it goes all the way to the global scope. It never zooms in. Let us imagine, you are at a city zoom level and you are searching for a specific name. By this method you only check the city scope, then the country scope and then the global scope. `), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `On the other hand, if you would zoom in, you would have to check each city scope, inside each city, each street scope as well. That is a lot of work and it does not make the work predictable. Basically, each search becomes searching the whole code base. As programmers we want to be lazy and smart, not hard working. `), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `More details for beginners`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Let us see where the arguments fit the scope. You can skip this part if you already know that they are inside the function rather than the scope the function is defined in.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `var firstName = 'Emil'; // variable declaration\nvar lastName = 'Martinov'; // variable declaration\nfunction myFullName(firstName, lastName) {\n  // function declaration and the parameters, firstName and lastName\n  return firstName + lastName; // returning the arguments !!\n}\nconsole.log(myFullName(firstName, lastName)); //logging the return of myFullName\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When I first saw code like this the first time, it was very confusing for me, seeing firstName here, firstName there and the last line. I did not understand seperation of all these same named values.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `From mathematics background I could guess that function is a placeholder for instructions, that values firstName, lastName are placeholders for what we might put into that function so that the function follows the recipe inside.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Let’s take a look at what happens at that code snippet.`), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `var firstName = 'Emil'; // variable declaration\nvar lastName = 'Martinov'; // variable declaration\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `We define our variables firstName and lastName.`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function myFullName(firstName, lastName) {\n  // function declaration and the parameters, firstName and lastName\n  return firstName + lastName; // returning the arguments !!\n}\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `Then we declare our function `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `myFullName`), `. Inside the paranthesis `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `()`), `, we are creating placeholders `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `firstName`), ` and `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `lastName`), `, these placeholders only exist inside our function. Think of the function declaration as a cooking recipe, and the placeholders, parameters in programming language, are our ingredients. After we tell the function its instruction `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `return firstName + lastName`), `, we are done with our recipe so we close `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `}`), ` the curly bracket.`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `Now we just finished writing the recipe, but we have not done anything with it. So at this time it is just a piece of paper with some instructions.`))), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `myFullName('Emil', 'Martinov'); // here we use the function\n// it will return 'EmilMartinov'\n`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `We are calling the function. The name of the function followed with `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `()`), ` is telling javascript engine that we want to call the function and let the recipe do some work. The `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `'Emil'`), ` and `, /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `'Martinov'`), ` are the ingredients that we use with the recipe. Since we are using our recipe function now, these are called arguments. Remember in the recipe itself they are called parameters. This small distinction is made so when we speak about functions we can communicate exactly what we are talking about to our colleagues.`)), /*#__PURE__*/React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When we are talking about parameters we are talking about the moment we are defining our function recipe. Those are placeholders. When we are talking about arguments, we are talking about calling the function. The arguments are the values that replace the parameters.`));\n  }\n\n}"}}},"pageContext":{"slug":"/scope-&&-closure/","previous":{"id":"e4270c77-1aed-5d96-bac9-9315eb0b4f33","fields":{"slug":"/first-post/"},"frontmatter":{"title":"First post"},"code":{"scope":""}},"next":{"id":"eb35ef18-15d4-5f9d-bf0f-070b3c9dd16c","fields":{"slug":"/varletconst/"},"frontmatter":{"title":"var, let and const --- (bonus: hoisting)"},"code":{"scope":""}}}},"staticQueryHashes":["3128451518","3132601055"]}