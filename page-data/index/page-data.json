{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"e v m"}},"allMdx":{"edges":[{"node":{"excerpt":"String literal  is any value that is inside  ''  or  \"\" . In Javascript you can use them both, this allows you to write strings where  \"Emil…","fields":{"slug":"/string-and-string-template-literal/","readingTime":{"text":"3 min read"}},"frontmatter":{"date":"August 11, 2020","title":"String Literal and String Template Literal"}}},{"node":{"excerpt":"The second console log will throw, as you can see from syntax highlighting, the a statement inside a template literal is not valid syntax…","fields":{"slug":"/ternary-operator/","readingTime":{"text":"2 min read"}},"frontmatter":{"date":"August 11, 2020","title":"Ternary Operator"}}},{"node":{"excerpt":"Stack:  Last in, first out. Think of pancakes, you start to eat from the warmest one. If you wanted to eat from the first one think of how…","fields":{"slug":"/stack-vs-heap/","readingTime":{"text":"1 min read"}},"frontmatter":{"date":"August 11, 2020","title":"Stack vs Heap"}}},{"node":{"excerpt":"Functions have to states, a definition and invocation state.  In the definition state, the engine reads the function definition and assigns…","fields":{"slug":"/parameters-vs-arguments/","readingTime":{"text":"2 min read"}},"frontmatter":{"date":"August 11, 2020","title":"Parameters vs Arguments"}}},{"node":{"excerpt":"Everything in Javascript is an object except the primitive values. Primitive values are passed by copy and objects by reference.  Primitive…","fields":{"slug":"/value-vs-reference/","readingTime":{"text":"4 min read"}},"frontmatter":{"date":"August 08, 2020","title":"Pass by value vs Pass by Reference"}}},{"node":{"excerpt":"Functions are one of the building blocks of programming, they are the worker bees that take away complexity from the main execution context…","fields":{"slug":"/functions/","readingTime":{"text":"1 min read"}},"frontmatter":{"date":"December 09, 2019","title":"Functions"}}},{"node":{"excerpt":"In short: var  creates a variable in its scope. Since Javascript does not have block level scope, variable lives in its scope and the…","fields":{"slug":"/varletconst/","readingTime":{"text":"7 min read"}},"frontmatter":{"date":"November 10, 2019","title":"var, let and const --- (bonus: hoisting)"}}},{"node":{"excerpt":"Let us talk about scope first.\nScope is a mechanism in computer science to hide level of detail and localize it. What does this mean exactly…","fields":{"slug":"/scope-&&-closure/","readingTime":{"text":"6 min read"}},"frontmatter":{"date":"March 16, 2019","title":"Scope && Closure"}}},{"node":{"excerpt":"This is my first post. I have been postponing blogging for a long time. The reason for that was I couldn't decide whether to create my own…","fields":{"slug":"/first-post/","readingTime":{"text":"4 min read"}},"frontmatter":{"date":"January 24, 2019","title":"First post"}}}]}},"pageContext":{}},"staticQueryHashes":["3128451518","3132601055"]}